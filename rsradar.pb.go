// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsradar/rsradar.proto

/*
Package rsradar is a generated protocol buffer package.

It is generated from these files:
	rsradar/rsradar.proto

It has these top-level messages:
	RadarTrafficFlowFileChunk
	DataSelector
	TimeRange
*/
package rsradar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RadarTrafficFlowFileChunk struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *RadarTrafficFlowFileChunk) Reset()                    { *m = RadarTrafficFlowFileChunk{} }
func (m *RadarTrafficFlowFileChunk) String() string            { return proto.CompactTextString(m) }
func (*RadarTrafficFlowFileChunk) ProtoMessage()               {}
func (*RadarTrafficFlowFileChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RadarTrafficFlowFileChunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type DataSelector struct {
	Time *TimeRange `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
}

func (m *DataSelector) Reset()                    { *m = DataSelector{} }
func (m *DataSelector) String() string            { return proto.CompactTextString(m) }
func (*DataSelector) ProtoMessage()               {}
func (*DataSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataSelector) GetTime() *TimeRange {
	if m != nil {
		return m.Time
	}
	return nil
}

type TimeRange struct {
	StartTime string `protobuf:"bytes,1,opt,name=startTime" json:"startTime,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeRange) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func init() {
	proto.RegisterType((*RadarTrafficFlowFileChunk)(nil), "rsradar.RadarTrafficFlowFileChunk")
	proto.RegisterType((*DataSelector)(nil), "rsradar.DataSelector")
	proto.RegisterType((*TimeRange)(nil), "rsradar.TimeRange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoadSideRadarService service

type RoadSideRadarServiceClient interface {
	Download(ctx context.Context, in *DataSelector, opts ...grpc.CallOption) (RoadSideRadarService_DownloadClient, error)
}

type roadSideRadarServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoadSideRadarServiceClient(cc *grpc.ClientConn) RoadSideRadarServiceClient {
	return &roadSideRadarServiceClient{cc}
}

func (c *roadSideRadarServiceClient) Download(ctx context.Context, in *DataSelector, opts ...grpc.CallOption) (RoadSideRadarService_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RoadSideRadarService_serviceDesc.Streams[0], c.cc, "/rsradar.RoadSideRadarService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &roadSideRadarServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoadSideRadarService_DownloadClient interface {
	Recv() (*RadarTrafficFlowFileChunk, error)
	grpc.ClientStream
}

type roadSideRadarServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *roadSideRadarServiceDownloadClient) Recv() (*RadarTrafficFlowFileChunk, error) {
	m := new(RadarTrafficFlowFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RoadSideRadarService service

type RoadSideRadarServiceServer interface {
	Download(*DataSelector, RoadSideRadarService_DownloadServer) error
}

func RegisterRoadSideRadarServiceServer(s *grpc.Server, srv RoadSideRadarServiceServer) {
	s.RegisterService(&_RoadSideRadarService_serviceDesc, srv)
}

func _RoadSideRadarService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoadSideRadarServiceServer).Download(m, &roadSideRadarServiceDownloadServer{stream})
}

type RoadSideRadarService_DownloadServer interface {
	Send(*RadarTrafficFlowFileChunk) error
	grpc.ServerStream
}

type roadSideRadarServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *roadSideRadarServiceDownloadServer) Send(m *RadarTrafficFlowFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _RoadSideRadarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rsradar.RoadSideRadarService",
	HandlerType: (*RoadSideRadarServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _RoadSideRadarService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rsradar/rsradar.proto",
}

func init() { proto.RegisterFile("rsradar/rsradar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0x04, 0x31,
	0x0c, 0x86, 0x1d, 0x10, 0xd7, 0x89, 0x7b, 0x2a, 0x2e, 0xac, 0xe2, 0x41, 0x7a, 0x10, 0xbd, 0xac,
	0xb2, 0xa2, 0x2f, 0xe0, 0xb2, 0xe0, 0xb5, 0x33, 0x2f, 0x10, 0xdb, 0xac, 0x16, 0xbb, 0x8d, 0x64,
	0xa2, 0xf3, 0xfa, 0x62, 0x99, 0x19, 0xbd, 0x78, 0x6a, 0xff, 0x2f, 0x09, 0xff, 0x9f, 0xc0, 0x42,
	0x3a, 0xc1, 0x80, 0x72, 0x3b, 0xbc, 0xab, 0x0f, 0x61, 0x65, 0x33, 0x1b, 0xa4, 0x7d, 0x80, 0x33,
	0xf7, 0xf3, 0x69, 0x05, 0x77, 0xbb, 0xe8, 0xb7, 0x89, 0xfb, 0x6d, 0x4c, 0xf4, 0xf4, 0xf6, 0x99,
	0xdf, 0xcd, 0x12, 0x66, 0x9e, 0xb3, 0x52, 0xd6, 0x65, 0x75, 0x59, 0x5d, 0xcf, 0xdd, 0x28, 0xed,
	0x23, 0xcc, 0x37, 0xa8, 0xd8, 0x50, 0x22, 0xaf, 0x2c, 0xe6, 0x0a, 0x0e, 0x35, 0xee, 0xa9, 0xb4,
	0x9d, 0xac, 0xcd, 0x6a, 0x74, 0x6b, 0xe3, 0x9e, 0x1c, 0xe6, 0x57, 0x72, 0xa5, 0x6e, 0x6f, 0xa0,
	0x9e, 0x90, 0xb9, 0x80, 0xba, 0x53, 0x14, 0x6d, 0xc7, 0xc9, 0xda, 0xfd, 0x82, 0x35, 0xc2, 0xa9,
	0x63, 0x0c, 0x4d, 0x0c, 0x54, 0x12, 0x36, 0x24, 0x5f, 0xd1, 0x93, 0x79, 0x86, 0xe3, 0x0d, 0xf7,
	0x39, 0x31, 0x06, 0xb3, 0x98, 0x8c, 0xfe, 0xa6, 0x39, 0xb7, 0x13, 0xfe, 0x77, 0x37, 0x7b, 0x70,
	0x57, 0xbd, 0x1c, 0x95, 0x63, 0xdc, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x39, 0xab, 0x4a, 0x7a,
	0x25, 0x01, 0x00, 0x00,
}
